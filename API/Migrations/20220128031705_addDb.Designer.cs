// <auto-generated />
using System;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20220128031705_addDb")]
    partial class addDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.Property<string>("Account_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiredToken")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OTP")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Account_ID");

                    b.HasIndex("NIK")
                        .IsUnique()
                        .HasFilter("[NIK] IS NOT NULL");

                    b.ToTable("TB_M_Account");
                });

            modelBuilder.Entity("API.Models.AccountRole", b =>
                {
                    b.Property<int>("AccountRole_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountRole_ID");

                    b.HasIndex("Account_ID");

                    b.HasIndex("Role_ID");

                    b.ToTable("TB_TR_AccountRole");
                });

            modelBuilder.Entity("API.Models.Department", b =>
                {
                    b.Property<string>("Department_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Department_ID");

                    b.ToTable("TB_M_Department");
                });

            modelBuilder.Entity("API.Models.Employee", b =>
                {
                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Department_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Overtime_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<int>("WorkDayPerMonth")
                        .HasColumnType("int");

                    b.Property<int>("WorkHourPerDay")
                        .HasColumnType("int");

                    b.HasKey("NIK");

                    b.HasIndex("Department_ID");

                    b.HasIndex("Manager_ID");

                    b.HasIndex("Overtime_ID");

                    b.ToTable("TB_M_Employee");
                });

            modelBuilder.Entity("API.Models.Overtime", b =>
                {
                    b.Property<string>("Overtime_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("MaxOvertime")
                        .HasColumnType("time");

                    b.HasKey("Overtime_ID");

                    b.ToTable("TB_M_Overtime");
                });

            modelBuilder.Entity("API.Models.OvertimeBonus", b =>
                {
                    b.Property<string>("OvertimeBonus_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("CommisionPct")
                        .HasColumnType("real");

                    b.Property<string>("Hour")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OvertimeBonus_ID");

                    b.ToTable("TB_M_OvertimeBonus");
                });

            modelBuilder.Entity("API.Models.OvertimeSchedule", b =>
                {
                    b.Property<int>("OvertimeSchedule_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalBonus")
                        .HasColumnType("real");

                    b.HasKey("OvertimeSchedule_ID");

                    b.HasIndex("NIK");

                    b.ToTable("TB_M_OvertimeSchedule");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Property<string>("Role_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Role_ID");

                    b.ToTable("TB_M_Role");
                });

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.HasOne("API.Models.Employee", "Employee")
                        .WithOne("Account")
                        .HasForeignKey("API.Models.Account", "NIK");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.AccountRole", b =>
                {
                    b.HasOne("API.Models.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("Account_ID");

                    b.HasOne("API.Models.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("Role_ID");

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Models.Employee", b =>
                {
                    b.HasOne("API.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("Department_ID");

                    b.HasOne("API.Models.Employee", "Manager")
                        .WithMany("Employees")
                        .HasForeignKey("Manager_ID");

                    b.HasOne("API.Models.Overtime", "Overtime")
                        .WithMany("Employees")
                        .HasForeignKey("Overtime_ID");

                    b.Navigation("Department");

                    b.Navigation("Manager");

                    b.Navigation("Overtime");
                });

            modelBuilder.Entity("API.Models.OvertimeSchedule", b =>
                {
                    b.HasOne("API.Models.Employee", "Employee")
                        .WithMany("OvertimeSchedules")
                        .HasForeignKey("NIK");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("API.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API.Models.Employee", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Employees");

                    b.Navigation("OvertimeSchedules");
                });

            modelBuilder.Entity("API.Models.Overtime", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
